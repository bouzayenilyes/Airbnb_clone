generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid()) @db.Uuid
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  favoriteIds     String[]

  accounts        Account[]
  listings        Listing[]
  reservations    Reservation[]
}

model Account {
  id                String    @id @default(uuid()) @db.Uuid
  userId            String    @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id             String    @id @default(uuid()) @db.Uuid
  title          String
  description    String
  imageSrc       String
  createdAt      DateTime  @default(now())
  category       String
  roomCount      Int
  bathroomCount  Int
  guestCount     Int
  locationValue  String
  userId         String    @db.Uuid
  price          Int

  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations   Reservation[]
}

model Reservation {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @db.Uuid
  listingId  String    @db.Uuid
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing    Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
